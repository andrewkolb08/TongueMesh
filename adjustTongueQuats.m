function [TD_quat,TL_quat,TB_quat] = adjustTongueQuats(TD,TL,TB,TD_quat,TL_quat,TB_quat,sensfilename)
%adjustTongueQuats  Adjusts the tongue quaternions to compensate for the
%sensors not being normal to the tongue surface when they are adhered to
%the subject's tongue.
%   Uses the normal vector generated by the cross product
%   of two vectors along the surface of the tongue to find a time point of
%   maximum tongue flatness.  This will be when the tongue points (TD,TL,
%   and TB) lie on a plane that is parallel to the X-Z plane in the
%   biteplate corrected space.

[~, kinDataName,~] = fileparts(sensfilename);
underscoreLoc = strfind(kinDataName,'_');
subName = kinDataName((underscoreLoc-1):length(kinDataName));
quatfile = [subName,'_quatCorrect.txt'];

v1 = TL-TD;
v2 = TB-TD;
desiredVec = [0 1 0];

normVec = cross(v2,v1);
normVecs = normalizeVecs(normVec);
thetas = arrayfun(@(idx) acosd(dot(normVecs(idx,:),desiredVec)),1:size(normVec,1));
[minVal, minInd] = min(abs(thetas));
minInd
%Start by determining the adjustment quaternions
% if(exist(quatfile,'file')==2)
%     quatVals = load(quatfile);
%     TD_quat_adj = quatVals(1,:);
%     TL_quat_adj = quatVals(2,:);
%     TB_quat_adj = quatVals(3,:);
% else
    true_quat = [-sqrt(2)/2, 0, 0, sqrt(2)/2];
    TD_quat_adj = qmult(qconj(TD_quat(minInd,:)),true_quat);
    TL_quat_adj = qmult(qconj(TL_quat(minInd,:)),true_quat);
    TB_quat_adj = qmult(qconj(TB_quat(minInd,:)),true_quat);
    
%     disp(num2str(minVal));
%     disp(TD_quat_adj);
%     disp(TL_quat_adj);
%     disp(TB_quat_adj);
%     disp('We advise you create a file "subname_quatCorrect.mat" to hold the quaternions corresponding minimum angle across all records for a given subject');
%end

TD_quat = qmult(TD_quat,TD_quat_adj);
TL_quat = qmult(TL_quat,TL_quat_adj);
TB_quat = qmult(TB_quat,TB_quat_adj);

%Normalize to get rid of round-off error
TD_quat = normalizeQuat(TD_quat);
TL_quat = normalizeQuat(TL_quat);
TB_quat = normalizeQuat(TB_quat);

end

